package compiletime;

import compiletime.Token.TokenType;
import compiletime.error.ErrorLog;
import compiletime.error.ParserException;
import compiletime.expression.Expression;
import compiletime.expression.group.Parentheses;
import compiletime.expression.group.SquareBrackets;
import compiletime.statement.Statement;
import compiletime.statement.StatementType;
import compiletime.statement.block.BlockStatementType;
import compiletime.statement.block.clause.ClauseStatementType;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import java.util.StringJoiner;

import static compiletime.Token.TokenType.IDENTIFIER;
import static compiletime.Token.TokenType.OPERATOR;
import static compiletime.error.ErrorDescription.*;

/**
 * Parsing is the second step in interpretation, after lexing. The parser translates the sequence of tokens generated by
 * the {@link Lexer} into abstract syntax trees representing expressions, and classes representing statements. A
 * statement is a top-level unit of code that may contain 0 or more expressions. For example,
 *
 *   return 10 + compute(x)
 *
 * translates to a single statement of type {@link compiletime.statement.basic.ReturnStatement} that contains an
 * expression of type {@link compiletime.expression.operation.ArithmeticOperation}. The expression is actually only the
 * root of an expression tree represented by nested sub-expressions:
 *
 *                 +
 *               /   \
 *             10    call
 *                 /      \
 *            compute     ( )
 *                         |
 *                         x
 *
 * @see Lexer
 * @see Token
 * @see Statement
 * @see StatementType
 * @see Expression
 */
public class Parser {

    /* tracks the nesting of control structures */
    private Stack<BlockStatementType> controlStack;

    /**
     * Translate a sequence of tokens into parsed statements, as detailed at the top of this class.
     * @param tokens the tokens to parse
     * @return a list of parsed statements
     */
    public List<Statement> parse(List<TokenLine> tokens) {
        List<Statement> statements = new ArrayList<>(tokens.size());
        controlStack = new Stack<>();
        for (TokenLine line : tokens) {
            try {
                StatementType type = StatementType.resolve(line);
                if (type instanceof ClauseStatementType) {
                    checkEnclosingStructure(type);
                }
                statements.add(type.parse(line, this));
            } catch (ParserException e) {
                e.setLineNumber(line.getLineNumber());
            }
        }
        checkMissingEnd(tokens);
        return statements;
    }

    /**
     * Verify that the specified statement type is permitted as a clause header within the current control structure.
     * Log and raise an interpreter error if the statement is not supported, or there is no active control structure.
     * @param type the clause type to verify
     * @throws ParserException if the clause is not supported by the current control structure, or the clause is not
     *                         inside a control structure
     * @see BlockStatementType#allowsClause
     */
    private void checkEnclosingStructure(StatementType type) {
        if (controlStack.isEmpty()) {
            throw ErrorLog.raise(BAD_JUMP_POINT, "'%s' statement must be inside a control structure", type.getName());
        } else if (!controlStack.peek().allowsClause(type.getName())) {
            throw ErrorLog.raise(BAD_JUMP_POINT, "Structure '%s' does not support '%s' clauses",
                    controlStack.peek().getName(), type.getName());
        }
    }

    /**
     * Verify that the control stack is empty. If it isn't, log an interpreter error. If the control stack is not empty
     * after the input has finished parsing, this indicates that the source code is missing 1 or more 'end' statements.
     * @param tokens the list of input tokens
     */
    private void checkMissingEnd(List<TokenLine> tokens) {
        if (!controlStack.isEmpty()) {
            int lastLineNumber = tokens.get(tokens.size() - 1).getLineNumber();
            ErrorLog.log(BAD_NESTING, lastLineNumber, "Expected 'end' to close '%s'",
                    controlStack.peek().getName());
        }
    }

    /**
     * Translate a list of tokens into an abstract syntax tree, beginning at the specified index.
     * @param expression the tokens to translate, which are mutated during parsing
     * @param startIndex the leftmost index to consider while parsing; indices to the left are completely ignored
     * @return the root of a parsed abstract syntax tree
     */
    public Expression parseFrom(List<Token> expression, int startIndex) {
        return parseExpression(expression.subList(startIndex, expression.size()));
    }

    /**
     * Translate a list of tokens into an abstract syntax tree.
     * @param expression the tokens to translate, which are mutated during parsing
     * @return the root of a parsed abstract syntax tree
     */
    public Expression parseExpression(List<Token> expression) {
        if (expression.isEmpty()) {
            // if there are no tokens (such as in a function call with no args)
            // just return empty parentheses
            return Parentheses.EMPTY_PARENS;
        }
        injectImplicitOperators(expression);
        resolveGroups(expression);
        List<Token> precedence = getPrecedence(expression);
        for (Token operator : precedence) {
            int position = expression.indexOf(operator);
            OperatorTable.parseOperation(position, expression);
        }
        if (expression.size() > 1) {
            // this happens if an operator is missing from the expression
            // for example: 3 x * 2
            StringJoiner joiner = new StringJoiner(" ");
            expression.forEach(x -> joiner.add(x.VALUE));
            throw ErrorLog.raise(MISSING_OPER, "Missing operator in expression: %s", joiner);
        }
        return expression.get(0).asExpression();
    }

    /**
     * Recursively search through a statement for subexpressions--pairs of (), [], or {}--and parse them.
     * @param tokens the statement to search through
     */
    private void resolveGroups(List<Token> tokens) {
        for (int i = 0; i < tokens.size(); i++) {
            Token token = tokens.get(i);
            if (token.TYPE == TokenType.GROUP) {
                Expression value = parseExpression(token.CHILDREN);
                if (value != Parentheses.EMPTY_PARENS) {
                    if (token.VALUE.equals("()")) {
                        value = new Parentheses(value);
                    } else if (token.VALUE.equals("[]")) {
                        value = new SquareBrackets(value);
                    }
                }
                tokens.set(i, Token.newExpression(token.VALUE, value));
            }
        }
    }

    public Stack<BlockStatementType> getControlStack() {
        return controlStack;
    }

    /**
     * Return a list of the operators in a statement, sorted by their precedence level from high to low.
     * @param tokens the statement from which the operators should be drawn
     * @return a list of operators sorted by precedence
     */
    private static List<Token> getPrecedence(List<Token> tokens) {
        // todo use more efficient data structure
        List<Token> ordering = new ArrayList<>();
        for (Token token : tokens) {
            if (token.TYPE == OPERATOR) {
                ordering.add(token);
            }
        }
        ordering.sort(OperatorTable.byPrecedence());
        return ordering;
    }

    /**
     * Insert special implict operators into the token list prior to beginning the main process of parsing. Examples of
     * implicit operations include function calls and custom operators.
     * @param tokens the token list to insert into
     */
    private static void injectImplicitOperators(List<Token> tokens) {
        for (int i = 0; i < tokens.size(); i++) {
            Token current = tokens.get(i);
            int distanceFromEnd = tokens.size() - i - 1;
            if (current.isValue() && distanceFromEnd > 0) {
                Token next = tokens.get(i + 1);
                if (next.matches("()") && (i == 0 || !tokens.get(i - 1).matches("def"))) {
                    tokens.add(i + 1, Token.newOperator("call"));
                } else if (next.matches("[]")) {
                    tokens.add(i + 1, Token.newOperator("index"));
                } else if (next.TYPE == IDENTIFIER) {
                    if (distanceFromEnd == 1 || !tokens.get(i + 2).isValue()) {
                        tokens.add(i + 1, Token.newOperator("unop"));
                    } else {
                        tokens.add(i + 1, Token.newOperator("."));
                        tokens.add(i + 3, Token.newOperator("biop"));
                    }
                }
            }
        }
    }

}
